<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="get_cam_point" label="Get Camera Point" icon="OBJ_camera">
    <helpURL>operator:Sop/subnet</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/subnet</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if "outputnodename" in kwargs and "inputindex" in kwargs:
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if "inputnodename" in kwargs and "outputindex" in kwargs:
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9
    if "autoplace" in kwargs:
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if "shiftclick" in kwargs and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if "nodepositionx" in kwargs and             "nodepositiony" in kwargs:
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if "node_bbox" in kwargs:
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'

pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if 'subnet' not in child_type:
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r'''
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_collider_geo_get_cam_point (Sop/subnet)
set _obj_collider_geo_get_cam_point = `run("opadd -e -n -v subnet get_cam_point")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_collider_geo_get_cam_point
opspareds '    parm {         name    "label1"         baseparm         label   "Input #1 Label"         invisible         export  dialog     }     parm {         name    "label2"         baseparm         label   "Input #2 Label"         invisible         export  dialog     }     parm {         name    "label3"         baseparm         label   "Input #3 Label"         invisible         export  dialog     }     parm {         name    "label4"         baseparm         label   "Input #4 Label"         invisible         export  dialog     }     parm {         name    "camera"         label   "Camera"         type    oppath         default { "" }         parmtag { "opfilter" "!!OBJ/CAMERA!!" }         parmtag { "oprelative" "." }         parmtag { "script_callback_language" "python" }     } ' $_obj_collider_geo_get_cam_point
opparm -V 19.5.368 $_obj_collider_geo_get_cam_point camera ( /obj/cam_HD_sh0100_nodof )
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_collider_geo_get_cam_point
opexprlanguage -s hscript $_obj_collider_geo_get_cam_point
opuserdata -n '___Version___' -v '19.5.368' $_obj_collider_geo_get_cam_point
opcf $_obj_collider_geo_get_cam_point

# Node $_obj_collider_geo_get_cam_point_init_N_and_up (Sop/attribwrangle)
set _obj_collider_geo_get_cam_point_init_N_and_up = `run("opadd -e -n -v attribwrangle init_N_and_up")`
oplocate -x `$arg2 + 0.47679999999999723` -y `$arg3 + 4.7534700000000001` $_obj_collider_geo_get_cam_point_init_N_and_up
opparm $_obj_collider_geo_get_cam_point_init_N_and_up  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_collider_geo_get_cam_point_init_N_and_up snippet ( 'v@up = {0, 1, 0};\nv@N = {0, 0, -1};' )
opcolor -c 0.80000001192092896 0.80000001192092896 0.80000001192092896 $_obj_collider_geo_get_cam_point_init_N_and_up
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c off -e on -b off $_obj_collider_geo_get_cam_point_init_N_and_up
opexprlanguage -s hscript $_obj_collider_geo_get_cam_point_init_N_and_up
opuserdata -n '___Version___' -v '' $_obj_collider_geo_get_cam_point_init_N_and_up

# Node $_obj_collider_geo_get_cam_point_add1 (Sop/add)
set _obj_collider_geo_get_cam_point_add1 = `run("opadd -e -n -v add add1")`
oplocate -x `$arg2 + 0` -y `$arg3 + 6.1117999999999997` $_obj_collider_geo_get_cam_point_add1
opparm $_obj_collider_geo_get_cam_point_add1  points ( 1 ) prims ( 1 )
opparm -V 19.5.368 $_obj_collider_geo_get_cam_point_add1 points ( 1 )
opcolor -c 0.80000001192092896 0.80000001192092896 0.80000001192092896 $_obj_collider_geo_get_cam_point_add1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_collider_geo_get_cam_point_add1
opexprlanguage -s hscript $_obj_collider_geo_get_cam_point_add1
opuserdata -n '___Version___' -v '19.5.368' $_obj_collider_geo_get_cam_point_add1

# Node $_obj_collider_geo_get_cam_point_apply_cam_transform (Sop/xform)
set _obj_collider_geo_get_cam_point_apply_cam_transform = `run("opadd -e -n -v xform apply_cam_transform")`
oplocate -x `$arg2 + 0.32302487834212756` -y `$arg3 + 3.4502437507450576` $_obj_collider_geo_get_cam_point_apply_cam_transform
chblockbegin
chadd -t 41.666666666666664 41.666666666666664 $_obj_collider_geo_get_cam_point_apply_cam_transform tx
chkey -t 41.666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'vorigin("", chs("../camera"))[0]' $_obj_collider_geo_get_cam_point_apply_cam_transform/tx
chadd -t 41.666666666666664 41.666666666666664 $_obj_collider_geo_get_cam_point_apply_cam_transform ty
chkey -t 41.666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'vorigin("", chs("../camera"))[1]' $_obj_collider_geo_get_cam_point_apply_cam_transform/ty
chadd -t 41.666666666666664 41.666666666666664 $_obj_collider_geo_get_cam_point_apply_cam_transform tz
chkey -t 41.666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'vorigin("", chs("../camera"))[2]' $_obj_collider_geo_get_cam_point_apply_cam_transform/tz
chadd -t 41.666666666666664 41.666666666666664 $_obj_collider_geo_get_cam_point_apply_cam_transform rx
chkey -t 41.666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'vorigin("", chs("../camera"))[3]' $_obj_collider_geo_get_cam_point_apply_cam_transform/rx
chadd -t 41.666666666666664 41.666666666666664 $_obj_collider_geo_get_cam_point_apply_cam_transform ry
chkey -t 41.666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'vorigin("", chs("../camera"))[4]' $_obj_collider_geo_get_cam_point_apply_cam_transform/ry
chadd -t 41.666666666666664 41.666666666666664 $_obj_collider_geo_get_cam_point_apply_cam_transform rz
chkey -t 41.666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'vorigin("", chs("../camera"))[5]' $_obj_collider_geo_get_cam_point_apply_cam_transform/rz
chblockend
opparm -V 19.5.368 $_obj_collider_geo_get_cam_point_apply_cam_transform t ( tx ty tz ) r ( rx ry rz )
chautoscope $_obj_collider_geo_get_cam_point_apply_cam_transform +tx +ty +tz +rx +ry +rz +sx +sy +sz
opcolor -c 0.80000001192092896 0.80000001192092896 0.80000001192092896 $_obj_collider_geo_get_cam_point_apply_cam_transform
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_collider_geo_get_cam_point_apply_cam_transform
opexprlanguage -s hscript $_obj_collider_geo_get_cam_point_apply_cam_transform
opuserdata -n '___Version___' -v '19.5.368' $_obj_collider_geo_get_cam_point_apply_cam_transform

# Node $_obj_collider_geo_get_cam_point_output0 (Sop/output)
set _obj_collider_geo_get_cam_point_output0 = `run("opadd -e -n -v output output0")`
oplocate -x `$arg2 + -0.32589999999999719` -y `$arg3 + 2.0134999999999996` $_obj_collider_geo_get_cam_point_output0
opparm -V 19.5.368 $_obj_collider_geo_get_cam_point_output0 outputidx ( 0 )
chlock $_obj_collider_geo_get_cam_point_output0 +outputidx
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_collider_geo_get_cam_point_output0
opexprlanguage -s hscript $_obj_collider_geo_get_cam_point_output0
opuserdata -n '___Version___' -v '19.5.368' $_obj_collider_geo_get_cam_point_output0
oporder -e init_N_and_up add1 apply_cam_transform output0 
opcf ..
opset -p on $_obj_collider_geo_get_cam_point

opcf $arg1
opcf $_obj_collider_geo_get_cam_point
opwire -n $_obj_collider_geo_get_cam_point_add1 -0 $_obj_collider_geo_get_cam_point_init_N_and_up
opwire -n $_obj_collider_geo_get_cam_point_init_N_and_up -0 $_obj_collider_geo_get_cam_point_apply_cam_transform
opwire -n $_obj_collider_geo_get_cam_point_apply_cam_transform -0 $_obj_collider_geo_get_cam_point_output0
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_collider_geo_get_cam_point
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_collider_geo_get_cam_point
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="get_camera_point" label="Get Camera Point" icon="OBJ_camera">
    <helpURL>operator:Sop/subnet</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/subnet</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if "outputnodename" in kwargs and "inputindex" in kwargs:
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if "inputnodename" in kwargs and "outputindex" in kwargs:
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9
    if "autoplace" in kwargs:
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if "shiftclick" in kwargs and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if "nodepositionx" in kwargs and             "nodepositiony" in kwargs:
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if "node_bbox" in kwargs:
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'

pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if 'subnet' not in child_type:
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r'''
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_burst_B_get_cam_point (Sop/subnet)
set _obj_burst_B_get_cam_point = `run("opadd -e -n -v subnet get_cam_point")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_burst_B_get_cam_point
opspareds '    parm {         name    "label1"         baseparm         label   "Input #1 Label"         invisible         export  all     }     parm {         name    "label2"         baseparm         label   "Input #2 Label"         invisible         export  all     }     parm {         name    "label3"         baseparm         label   "Input #3 Label"         invisible         export  all     }     parm {         name    "label4"         baseparm         label   "Input #4 Label"         invisible         export  all     }     parm {         name    "camera"         label   "Camera"         type    oppath         default { "" }         parmtag { "opfilter" "!!OBJ/CAMERA!!" }         parmtag { "oprelative" "." }         parmtag { "script_callback_language" "python" }     } ' $_obj_burst_B_get_cam_point
opparm -V 19.5.605 $_obj_burst_B_get_cam_point camera ( /obj/cam_0130 )
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_burst_B_get_cam_point
opexprlanguage -s hscript $_obj_burst_B_get_cam_point
opuserdata -n '___Version___' -v '19.5.605' $_obj_burst_B_get_cam_point
opcf $_obj_burst_B_get_cam_point

# Node $_obj_burst_B_get_cam_point_init_N_and_up (Sop/attribwrangle)
set _obj_burst_B_get_cam_point_init_N_and_up = `run("opadd -e -n -v attribwrangle init_N_and_up")`
oplocate -x `$arg2 + -5.3902703670634917` -y `$arg3 + -42.156353268900546` $_obj_burst_B_get_cam_point_init_N_and_up
opparm $_obj_burst_B_get_cam_point_init_N_and_up  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_burst_B_get_cam_point_init_N_and_up snippet ( 'v@up = {0, 1, 0};\nv@N = {0, 0, -1};' )
opcolor -c 0.80000001192092896 0.80000001192092896 0.80000001192092896 $_obj_burst_B_get_cam_point_init_N_and_up
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c off -e on -b off $_obj_burst_B_get_cam_point_init_N_and_up
opexprlanguage -s hscript $_obj_burst_B_get_cam_point_init_N_and_up
opuserdata -n '___Version___' -v '' $_obj_burst_B_get_cam_point_init_N_and_up

# Node $_obj_burst_B_get_cam_point_add1 (Sop/add)
set _obj_burst_B_get_cam_point_add1 = `run("opadd -e -n -v add add1")`
oplocate -x `$arg2 + -5.8670703670634889` -y `$arg3 + -40.798023268900543` $_obj_burst_B_get_cam_point_add1
opparm $_obj_burst_B_get_cam_point_add1  points ( 1 ) prims ( 1 )
opparm -V 19.5.605 $_obj_burst_B_get_cam_point_add1 points ( 1 )
opcolor -c 0.80000001192092896 0.80000001192092896 0.80000001192092896 $_obj_burst_B_get_cam_point_add1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_burst_B_get_cam_point_add1
opexprlanguage -s hscript $_obj_burst_B_get_cam_point_add1
opuserdata -n '___Version___' -v '19.5.605' $_obj_burst_B_get_cam_point_add1

# Node $_obj_burst_B_get_cam_point_output0 (Sop/output)
set _obj_burst_B_get_cam_point_output0 = `run("opadd -e -n -v output output0")`
oplocate -x `$arg2 + -5.4080252924928205` -y `$arg3 + -47.843671413700839` $_obj_burst_B_get_cam_point_output0
opparm -V 19.5.605 $_obj_burst_B_get_cam_point_output0 outputidx ( 0 )
chlock $_obj_burst_B_get_cam_point_output0 +outputidx
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_burst_B_get_cam_point_output0
opexprlanguage -s hscript $_obj_burst_B_get_cam_point_output0
opuserdata -n '___Version___' -v '19.5.605' $_obj_burst_B_get_cam_point_output0

# Node $_obj_burst_B_get_cam_point_object_merge1 (Sop/object_merge)
set _obj_burst_B_get_cam_point_object_merge1 = `run("opadd -e -n -v object_merge object_merge1")`
oplocate -x `$arg2 + -5.3885203991401038` -y `$arg3 + -44.779020681411737` $_obj_burst_B_get_cam_point_object_merge1
opparm $_obj_burst_B_get_cam_point_object_merge1  numobj ( 1 )
opparm -V 19.5.605 $_obj_burst_B_get_cam_point_object_merge1 xformpath ( '`chsop("../camera")`' ) invertxform ( on ) objpath1 ( ../A_POINT )
opcolor -c 0.80000001192092896 1 0.80000001192092896 $_obj_burst_B_get_cam_point_object_merge1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_burst_B_get_cam_point_object_merge1
opexprlanguage -s hscript $_obj_burst_B_get_cam_point_object_merge1

# Node $_obj_burst_B_get_cam_point_A_POINT (Sop/null)
set _obj_burst_B_get_cam_point_A_POINT = `run("opadd -e -n -v null A_POINT")`
oplocate -x `$arg2 + -5.3872703705298743` -y `$arg3 + -43.425799097210707` $_obj_burst_B_get_cam_point_A_POINT
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_burst_B_get_cam_point_A_POINT
opexprlanguage -s hscript $_obj_burst_B_get_cam_point_A_POINT

# Node $_obj_burst_B_get_cam_point_apply_cam_transform (Sop/xform)
set _obj_burst_B_get_cam_point_apply_cam_transform = `run("opadd -e -n -v xform apply_cam_transform")`
oplocate -x `$arg2 + -0.93018657974227725` -y `$arg3 + -46.261849441110471` $_obj_burst_B_get_cam_point_apply_cam_transform
chblockbegin
chadd -t 41.666666666666664 41.666666666666664 $_obj_burst_B_get_cam_point_apply_cam_transform tx
chkey -t 41.666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'vorigin("", chs("../camera"))[0]' $_obj_burst_B_get_cam_point_apply_cam_transform/tx
chadd -t 41.666666666666664 41.666666666666664 $_obj_burst_B_get_cam_point_apply_cam_transform ty
chkey -t 41.666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'vorigin("", chs("../camera"))[1]' $_obj_burst_B_get_cam_point_apply_cam_transform/ty
chadd -t 41.666666666666664 41.666666666666664 $_obj_burst_B_get_cam_point_apply_cam_transform tz
chkey -t 41.666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'vorigin("", chs("../camera"))[2]' $_obj_burst_B_get_cam_point_apply_cam_transform/tz
chadd -t 41.666666666666664 41.666666666666664 $_obj_burst_B_get_cam_point_apply_cam_transform rx
chkey -t 41.666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'vorigin("", chs("../camera"))[3]' $_obj_burst_B_get_cam_point_apply_cam_transform/rx
chadd -t 41.666666666666664 41.666666666666664 $_obj_burst_B_get_cam_point_apply_cam_transform ry
chkey -t 41.666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'vorigin("", chs("../camera"))[4]' $_obj_burst_B_get_cam_point_apply_cam_transform/ry
chadd -t 41.666666666666664 41.666666666666664 $_obj_burst_B_get_cam_point_apply_cam_transform rz
chkey -t 41.666666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'vorigin("", chs("../camera"))[5]' $_obj_burst_B_get_cam_point_apply_cam_transform/rz
chblockend
opparm -V 19.5.605 $_obj_burst_B_get_cam_point_apply_cam_transform t ( tx ty tz ) r ( rx ry rz )
chautoscope $_obj_burst_B_get_cam_point_apply_cam_transform +tx +ty +tz +rx +ry +rz +sx +sy +sz
opcolor -c 0.80000001192092896 0.80000001192092896 0.80000001192092896 $_obj_burst_B_get_cam_point_apply_cam_transform
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b on $_obj_burst_B_get_cam_point_apply_cam_transform
opexprlanguage -s hscript $_obj_burst_B_get_cam_point_apply_cam_transform
opuserdata -n '___Version___' -v '19.5.605' $_obj_burst_B_get_cam_point_apply_cam_transform
oporder -e init_N_and_up add1 output0 object_merge1 A_POINT apply_cam_transform 
opcf ..
opset -p on $_obj_burst_B_get_cam_point

opcf $arg1
opcf $_obj_burst_B_get_cam_point
opwire -n $_obj_burst_B_get_cam_point_add1 -0 $_obj_burst_B_get_cam_point_init_N_and_up
opwire -n $_obj_burst_B_get_cam_point_object_merge1 -0 $_obj_burst_B_get_cam_point_output0
opwire -n $_obj_burst_B_get_cam_point_init_N_and_up -0 $_obj_burst_B_get_cam_point_A_POINT
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_burst_B_get_cam_point
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_burst_B_get_cam_point
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>
</shelfDocument>
