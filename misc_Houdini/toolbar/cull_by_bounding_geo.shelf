<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="cull_by_bounding_geo" label="Cull by Bounding Geo" icon="SOP_blast">
    <helpText><![CDATA[Cull points by bounding object.]]></helpText>
    <toolMenuContext name="network">
      <contextOpType>Sop/subnet</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if "outputnodename" in kwargs and "inputindex" in kwargs:
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if "inputnodename" in kwargs and "outputindex" in kwargs:
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9
    if "autoplace" in kwargs:
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if "shiftclick" in kwargs and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if "nodepositionx" in kwargs and             "nodepositiony" in kwargs:
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if "node_bbox" in kwargs:
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'

pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if 'null' not in child_type:
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r'''
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_rainbow_cull_points_by_bounding_object (Sop/subnet)
set _obj_rainbow_cull_points_by_bounding_object = `run("opadd -e -n -v subnet cull_points_by_bounding_object")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_rainbow_cull_points_by_bounding_object
opspareds '    parm {         name    "label1"         baseparm         label   "Input #1 Label"         invisible         export  all     }     parm {         name    "label2"         baseparm         label   "Input #2 Label"         invisible         export  all     }     parm {         name    "label3"         baseparm         label   "Input #3 Label"         invisible         export  all     }     parm {         name    "label4"         baseparm         label   "Input #4 Label"         invisible         export  all     }     parm {         name    "reverse"         label   "Reverse"         type    toggle         default { "0" }         parmtag { "script_callback_language" "python" }     } ' $_obj_rainbow_cull_points_by_bounding_object
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_rainbow_cull_points_by_bounding_object
opexprlanguage -s hscript $_obj_rainbow_cull_points_by_bounding_object
opuserdata -n '___Version___' -v '19.5.303' $_obj_rainbow_cull_points_by_bounding_object
opuserdata -n '___toolcount___' -v '26' $_obj_rainbow_cull_points_by_bounding_object
opuserdata -n '___toolid___' -v 'cull_by_bounding_geo' $_obj_rainbow_cull_points_by_bounding_object
opcf $_obj_rainbow_cull_points_by_bounding_object

# Node $_obj_rainbow_cull_points_by_bounding_object_group1 (Sop/groupcreate)
set _obj_rainbow_cull_points_by_bounding_object_group1 = `run("opadd -e -n -v groupcreate group1")`
oplocate -x `$arg2 + 0.47058823529411764` -y `$arg3 + 4.8646588235294121` $_obj_rainbow_cull_points_by_bounding_object_group1
opparm -V 19.5.303 $_obj_rainbow_cull_points_by_bounding_object_group1 groupname ( __pickMe ) grouptype ( point ) groupbase ( off ) groupbounding ( on ) boundtype ( usebobject )
opset -d off -r off -h on -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_rainbow_cull_points_by_bounding_object_group1
opexprlanguage -s hscript $_obj_rainbow_cull_points_by_bounding_object_group1
opuserdata -n '___Version___' -v '19.5.303' $_obj_rainbow_cull_points_by_bounding_object_group1
opuserdata -n '___toolcount___' -v '26' $_obj_rainbow_cull_points_by_bounding_object_group1
opuserdata -n '___toolid___' -v 'cull_by_bounding_geo' $_obj_rainbow_cull_points_by_bounding_object_group1

# Node $_obj_rainbow_cull_points_by_bounding_object_delete1 (Sop/delete)
set _obj_rainbow_cull_points_by_bounding_object_delete1 = `run("opadd -e -n -v delete delete1")`
oplocate -x `$arg2 + 0.35079999999999995` -y `$arg3 + 3.9346464705882354` $_obj_rainbow_cull_points_by_bounding_object_delete1
chblockbegin
chadd -t 40 40 $_obj_rainbow_cull_points_by_bounding_object_delete1 negate
chkey -t 40 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../reverse")' $_obj_rainbow_cull_points_by_bounding_object_delete1/negate
chadd -t 40 40 $_obj_rainbow_cull_points_by_bounding_object_delete1 rangeend
chkey -t 40 -v 0 -m 0 -a 0 -A 0 -T a  -F '$N' $_obj_rainbow_cull_points_by_bounding_object_delete1/rangeend
chblockend
opparm -V 19.5.303 $_obj_rainbow_cull_points_by_bounding_object_delete1 group ( __pickMe ) negate ( negate ) entity ( point )
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_rainbow_cull_points_by_bounding_object_delete1
opexprlanguage -s hscript $_obj_rainbow_cull_points_by_bounding_object_delete1
opuserdata -n '___Version___' -v '19.5.303' $_obj_rainbow_cull_points_by_bounding_object_delete1
opuserdata -n '___toolcount___' -v '26' $_obj_rainbow_cull_points_by_bounding_object_delete1
opuserdata -n '___toolid___' -v 'cull_by_bounding_geo' $_obj_rainbow_cull_points_by_bounding_object_delete1

# Node $_obj_rainbow_cull_points_by_bounding_object_groupdelete1 (Sop/groupdelete)
set _obj_rainbow_cull_points_by_bounding_object_groupdelete1 = `run("opadd -e -n -v groupdelete groupdelete1")`
oplocate -x `$arg2 + 0.3508` -y `$arg3 + 2.8422499999999999` $_obj_rainbow_cull_points_by_bounding_object_groupdelete1
opparm $_obj_rainbow_cull_points_by_bounding_object_groupdelete1  deletions ( 1 )
opparm -V 19.5.303 $_obj_rainbow_cull_points_by_bounding_object_groupdelete1 grouptype1 ( points ) group1 ( __pickMe )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_rainbow_cull_points_by_bounding_object_groupdelete1
opexprlanguage -s hscript $_obj_rainbow_cull_points_by_bounding_object_groupdelete1
opuserdata -n '___Version___' -v '19.5.303' $_obj_rainbow_cull_points_by_bounding_object_groupdelete1
opuserdata -n '___toolcount___' -v '26' $_obj_rainbow_cull_points_by_bounding_object_groupdelete1
opuserdata -n '___toolid___' -v 'cull_by_bounding_geo' $_obj_rainbow_cull_points_by_bounding_object_groupdelete1

# Node $_obj_rainbow_cull_points_by_bounding_object_output0 (Sop/output)
set _obj_rainbow_cull_points_by_bounding_object_output0 = `run("opadd -e -n -v output output0")`
oplocate -x `$arg2 + 0.3508` -y `$arg3 + 1.33996` $_obj_rainbow_cull_points_by_bounding_object_output0
opparm -V 19.5.303 $_obj_rainbow_cull_points_by_bounding_object_output0 outputidx ( 0 )
chlock $_obj_rainbow_cull_points_by_bounding_object_output0 +outputidx
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_rainbow_cull_points_by_bounding_object_output0
opexprlanguage -s hscript $_obj_rainbow_cull_points_by_bounding_object_output0
opuserdata -n '___Version___' -v '19.5.303' $_obj_rainbow_cull_points_by_bounding_object_output0
opuserdata -n '___toolcount___' -v '26' $_obj_rainbow_cull_points_by_bounding_object_output0
opuserdata -n '___toolid___' -v 'cull_by_bounding_geo' $_obj_rainbow_cull_points_by_bounding_object_output0
oporder -e group1 delete1 groupdelete1 output0 
opcf ..
opset -p on $_obj_rainbow_cull_points_by_bounding_object
opcf $arg1

# Node $_obj_rainbow_bouning_geo (Sop/null)
set _obj_rainbow_bouning_geo = `run("opadd -e -n -v null bouning_geo")`
oplocate -x `$arg2 + 0.31016293363146374` -y `$arg3 + 1.4320930066245814` $_obj_rainbow_bouning_geo
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_rainbow_bouning_geo
opexprlanguage -s hscript $_obj_rainbow_bouning_geo
opuserdata -n '___Version___' -v '19.5.303' $_obj_rainbow_bouning_geo
opset -p on $_obj_rainbow_bouning_geo
opcf $arg1

# Node $_obj_rainbow_input_geo (Sop/null)
set _obj_rainbow_input_geo = `run("opadd -e -n -v null input_geo")`
oplocate -x `$arg2 + -1.7590520728980508` -y `$arg3 + 1.4320930066245814` $_obj_rainbow_input_geo
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_rainbow_input_geo
opexprlanguage -s hscript $_obj_rainbow_input_geo
opuserdata -n '___Version___' -v '19.5.303' $_obj_rainbow_input_geo
opset -p on $_obj_rainbow_input_geo

opcf $arg1
opwire -n $_obj_rainbow_input_geo -0 $_obj_rainbow_cull_points_by_bounding_object
opwire -n $_obj_rainbow_bouning_geo -1 $_obj_rainbow_cull_points_by_bounding_object
opcf $_obj_rainbow_cull_points_by_bounding_object
opwire -n -i 0 -0 $_obj_rainbow_cull_points_by_bounding_object_group1
opwire -n -i 1 -1 $_obj_rainbow_cull_points_by_bounding_object_group1
opwire -n $_obj_rainbow_cull_points_by_bounding_object_group1 -0 $_obj_rainbow_cull_points_by_bounding_object_delete1
opwire -n $_obj_rainbow_cull_points_by_bounding_object_delete1 -0 $_obj_rainbow_cull_points_by_bounding_object_groupdelete1
opwire -n $_obj_rainbow_cull_points_by_bounding_object_groupdelete1 -0 $_obj_rainbow_cull_points_by_bounding_object_output0
opcf ..
opcf $arg1
opcf $arg1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_rainbow_input_geo
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_rainbow_cull_points_by_bounding_object
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>
</shelfDocument>
