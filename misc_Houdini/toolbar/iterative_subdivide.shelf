<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="iterative_subdivide" label="Iterative Subdivide" icon="SOP_subdivide">
    <helpText><![CDATA[This node will adaptively subdivide polys until all polys are at least approximately the size of the Target Edge Length.
Use it to quickly upres a model without changing the underlying topology and uvs.]]></helpText>
    <toolMenuContext name="network">
      <contextOpType>Sop/subnet</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if "outputnodename" in kwargs and "inputindex" in kwargs:
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if "inputnodename" in kwargs and "outputindex" in kwargs:
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9
    if "autoplace" in kwargs:
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if "shiftclick" in kwargs and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if "nodepositionx" in kwargs and             "nodepositiony" in kwargs:
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if "node_bbox" in kwargs:
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'

pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if 'subnet' not in child_type:
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r'''
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_iterativeSubdivide (Sop/subnet)
set _obj_geo1_iterativeSubdivide = `run("opadd -e -n -v subnet iterativeSubdivide")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_iterativeSubdivide
opspareds '    parm {         name    "target_edge"         label   "Target Edge Length"         type    float         default { "0" }         range   { 0! 0.1 }     }     parm {         name    "label1"         baseparm         label   "Input #1 Label"         invisible         export  all     }     parm {         name    "label2"         baseparm         label   "Input #2 Label"         invisible         export  all     }     parm {         name    "label3"         baseparm         label   "Input #3 Label"         invisible         export  all     }     parm {         name    "label4"         baseparm         label   "Input #4 Label"         invisible         export  all     }     parm {         name    "overridecrease"         label   "Override Crease Weight Attribute"         type    toggle         default { "on" }         parmtag { "autoscope" "0000000000000000" }         parmtag { "script_callback_language" "python" }     }     parm {         name    "creaseweight"         label   "Crease Weight"         type    float         default { "10" }         range   { 0! 10 }         parmtag { "autoscope" "0000000000000000" }         parmtag { "script_callback_language" "python" }     }     parm {         name    "updatenmls"         label   "Recompute Point Normals"         type    toggle         default { "on" }         parmtag { "autoscope" "0000000000000000" }         parmtag { "script_callback_language" "python" }     } ' $_obj_geo1_iterativeSubdivide
opparm -V 19.5.368 $_obj_geo1_iterativeSubdivide target_edge ( 0.080000000000000002 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_iterativeSubdivide
opexprlanguage -s hscript $_obj_geo1_iterativeSubdivide
opuserdata -n '___Version___' -v '19.5.368' $_obj_geo1_iterativeSubdivide
opcf $_obj_geo1_iterativeSubdivide

# Node $_obj_geo1_iterativeSubdivide_output0 (Sop/output)
set _obj_geo1_iterativeSubdivide_output0 = `run("opadd -e -n -v output output0")`
oplocate -x `$arg2 + 3.32315` -y `$arg3 + 7.3863399999999997` $_obj_geo1_iterativeSubdivide_output0
opparm -V 19.5.368 $_obj_geo1_iterativeSubdivide_output0 outputidx ( 0 )
chlock $_obj_geo1_iterativeSubdivide_output0 +outputidx
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_iterativeSubdivide_output0
opexprlanguage -s hscript $_obj_geo1_iterativeSubdivide_output0
opuserdata -n '___Version___' -v '19.5.368' $_obj_geo1_iterativeSubdivide_output0

# Node $_obj_geo1_iterativeSubdivide_update_subdivide_group (Sop/attribwrangle)
set _obj_geo1_iterativeSubdivide_update_subdivide_group = `run("opadd -e -n -v attribwrangle update_subdivide_group")`
oplocate -x `$arg2 + 2.86375` -y `$arg3 + 14.5861` $_obj_geo1_iterativeSubdivide_update_subdivide_group
opspareds '    group {         name    "folder1"         label   "Code"          parm {             name    "group"             baseparm             label   "Group"             export  none             bindselector points "Modify Points"                 "Select the points to affect and press Enter to complete."                 0 1 0xffffffff 0 grouptype 0         }         parm {             name    "grouptype"             baseparm             label   "Group Type"             export  none         }         parm {             name    "class"             baseparm             label   "Run Over"             export  none         }         parm {             name    "vex_numcount"             baseparm             label   "Number Count"             export  none         }         parm {             name    "vex_threadjobsize"             baseparm             label   "Thread Job Size"             export  none         }         parm {             name    "snippet"             baseparm             label   "VEXpression"             export  all         }         parm {             name    "exportlist"             baseparm             label   "Attributes to Create"             export  none         }         parm {             name    "vex_strict"             baseparm             label   "Enforce Prototypes"             export  none         }     }      group {         name    "folder1_1"         label   "Bindings"          parm {             name    "autobind"             baseparm             label   "Autobind by Name"             export  none         }         multiparm {             name    "bindings"             label    "Number of Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindname#"                 baseparm                 label   "Attribute Name"                 export  none             }             parm {                 name    "bindparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "groupautobind"             baseparm             label   "Autobind Groups by Name"             export  none         }         multiparm {             name    "groupbindings"             label    "Group Bindings"             baseparm             default 0             parmtag { "autoscope" "0000000000000000" }             parmtag { "multistartoffset" "1" }              parm {                 name    "bindgroupname#"                 baseparm                 label   "Group Name"                 export  none             }             parm {                 name    "bindgroupparm#"                 baseparm                 label   "VEX Parameter"                 export  none             }         }          parm {             name    "vex_cwdpath"             baseparm             label   "Evaluation Node Path"             export  none         }         parm {             name    "vex_outputmask"             baseparm             label   "Export Parameters"             export  none         }         parm {             name    "vex_updatenmls"             baseparm             label   "Update Normals If Displaced"             export  none         }         parm {             name    "vex_matchattrib"             baseparm             label   "Attribute to Match"             export  none         }         parm {             name    "vex_inplace"             baseparm             label   "Compute Results In Place"             export  none         }         parm {             name    "vex_selectiongroup"             baseparm             label   "Output Selection Group"             export  none         }     }      parm {         name    "threshold"         label   "Threshold"         type    float         default { "0" }         range   { 0! 0.1 }     }     parm {         name    "vex_precision"         baseparm         label   "VEX Precision"         export  none     } ' $_obj_geo1_iterativeSubdivide_update_subdivide_group
opparm $_obj_geo1_iterativeSubdivide_update_subdivide_group  bindings ( 0 ) groupbindings ( 0 )
chblockbegin
chadd -t 0 0 $_obj_geo1_iterativeSubdivide_update_subdivide_group threshold
chkey -t 0 -v 0.0001 -m 0 -a 0 -A 0 -T a  -F '0.5 * ch("../target_edge")*ch("../target_edge")' $_obj_geo1_iterativeSubdivide_update_subdivide_group/threshold
chblockend
opparm $_obj_geo1_iterativeSubdivide_update_subdivide_group class ( primitive ) snippet ( '@group___subdivideMe = @__area>chf("threshold");' ) threshold ( threshold )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_iterativeSubdivide_update_subdivide_group
opexprlanguage -s hscript $_obj_geo1_iterativeSubdivide_update_subdivide_group
opuserdata -n '___Version___' -v '' $_obj_geo1_iterativeSubdivide_update_subdivide_group

# Node $_obj_geo1_iterativeSubdivide_init_subdivide_group (Sop/attribwrangle)
set _obj_geo1_iterativeSubdivide_init_subdivide_group = `run("opadd -e -n -v attribwrangle init_subdivide_group")`
oplocate -x `$arg2 + 3.0525799999999998` -y `$arg3 + 18.053799999999999` $_obj_geo1_iterativeSubdivide_init_subdivide_group
opparm $_obj_geo1_iterativeSubdivide_init_subdivide_group  bindings ( 0 ) groupbindings ( 0 )
opparm $_obj_geo1_iterativeSubdivide_init_subdivide_group class ( primitive ) snippet ( '@group___subdivideMe = 1;' )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_iterativeSubdivide_init_subdivide_group
opexprlanguage -s hscript $_obj_geo1_iterativeSubdivide_init_subdivide_group
opuserdata -n '___Version___' -v '' $_obj_geo1_iterativeSubdivide_init_subdivide_group

# Node $_obj_geo1_iterativeSubdivide_subdivide1 (Sop/subdivide)
set _obj_geo1_iterativeSubdivide_subdivide1 = `run("opadd -e -n -v subdivide subdivide1")`
oplocate -x `$arg2 + 2.8667500000000001` -y `$arg3 + 13.2597` $_obj_geo1_iterativeSubdivide_subdivide1
chblockbegin
chadd -t 41.666666666666664 41.666666666666664 $_obj_geo1_iterativeSubdivide_subdivide1 overridecrease
chkey -t 41.666666666666664 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../overridecrease")' $_obj_geo1_iterativeSubdivide_subdivide1/overridecrease
chadd -t 41.666666666666664 41.666666666666664 $_obj_geo1_iterativeSubdivide_subdivide1 creaseweight
chkey -t 41.666666666666664 -v 10 -m 0 -a 0 -A 0 -T a  -F 'ch("../creaseweight")' $_obj_geo1_iterativeSubdivide_subdivide1/creaseweight
chadd -t 41.666666666666664 41.666666666666664 $_obj_geo1_iterativeSubdivide_subdivide1 updatenmls
chkey -t 41.666666666666664 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../updatenmls")' $_obj_geo1_iterativeSubdivide_subdivide1/updatenmls
chblockend
opparm -V 19.5.368 $_obj_geo1_iterativeSubdivide_subdivide1 subdivide ( __subdivideMe ) algorithm ( houdini ) overridecrease ( overridecrease ) creaseweight ( creaseweight ) updatenmls ( updatenmls )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_iterativeSubdivide_subdivide1
opexprlanguage -s hscript $_obj_geo1_iterativeSubdivide_subdivide1
opuserdata -n '___Version___' -v '19.5.368' $_obj_geo1_iterativeSubdivide_subdivide1

# Node $_obj_geo1_iterativeSubdivide_measure_area (Sop/measure)
set _obj_geo1_iterativeSubdivide_measure_area = `run("opadd -e -n -v measure measure_area")`
oplocate -x `$arg2 + 3.05558` -y `$arg3 + 16.0169` $_obj_geo1_iterativeSubdivide_measure_area
opparm -V 19.5.368 $_obj_geo1_iterativeSubdivide_measure_area type ( area ) override ( on ) attribname ( __area )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_iterativeSubdivide_measure_area
opexprlanguage -s hscript $_obj_geo1_iterativeSubdivide_measure_area
opuserdata -n '___Version___' -v '19.5.368' $_obj_geo1_iterativeSubdivide_measure_area

# Node $_obj_geo1_iterativeSubdivide_repeat_end1 (Sop/block_end)
set _obj_geo1_iterativeSubdivide_repeat_end1 = `run("opadd -e -n -v block_end repeat_end1")`
oplocate -x `$arg2 + 3.2132100000000001` -y `$arg3 + 11.7796` $_obj_geo1_iterativeSubdivide_repeat_end1
chblockbegin
chadd -t 0 0 $_obj_geo1_iterativeSubdivide_repeat_end1 stopcondition
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'nprimsgroup("../update_subdivide_group", "__subdivideMe") == 0' $_obj_geo1_iterativeSubdivide_repeat_end1/stopcondition
chblockend
opparm -V 19.5.368 $_obj_geo1_iterativeSubdivide_repeat_end1 itermethod ( count ) iterations ( 1000 ) blockpath ( ../repeat_begin1 ) stopcondition ( stopcondition )
opcolor -c 0.75 0.40000000596046448 0 $_obj_geo1_iterativeSubdivide_repeat_end1
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_iterativeSubdivide_repeat_end1
opexprlanguage -s hscript $_obj_geo1_iterativeSubdivide_repeat_end1
opuserdata -n '___Version___' -v '19.5.368' $_obj_geo1_iterativeSubdivide_repeat_end1

# Node $_obj_geo1_iterativeSubdivide_repeat_begin1 (Sop/block_begin)
set _obj_geo1_iterativeSubdivide_repeat_begin1 = `run("opadd -e -n -v block_begin repeat_begin1")`
oplocate -x `$arg2 + 3.2132100000000001` -y `$arg3 + 17.056899999999999` $_obj_geo1_iterativeSubdivide_repeat_begin1
opparm -V 19.5.368 $_obj_geo1_iterativeSubdivide_repeat_begin1 blockpath ( ../repeat_end1 )
opcolor -c 0.75 0.40000000596046448 0 $_obj_geo1_iterativeSubdivide_repeat_begin1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_iterativeSubdivide_repeat_begin1
opexprlanguage -s hscript $_obj_geo1_iterativeSubdivide_repeat_begin1
opuserdata -n '___Version___' -v '19.5.368' $_obj_geo1_iterativeSubdivide_repeat_begin1

# Node $_obj_geo1_iterativeSubdivide_groupdelete1 (Sop/groupdelete)
set _obj_geo1_iterativeSubdivide_groupdelete1 = `run("opadd -e -n -v groupdelete groupdelete1")`
oplocate -x `$arg2 + 3.2116099999999999` -y `$arg3 + 10.315799999999999` $_obj_geo1_iterativeSubdivide_groupdelete1
opparm $_obj_geo1_iterativeSubdivide_groupdelete1  deletions ( 1 )
opparm -V 19.5.368 $_obj_geo1_iterativeSubdivide_groupdelete1 grouptype1 ( prims ) group1 ( __subdivideMe )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_iterativeSubdivide_groupdelete1
opexprlanguage -s hscript $_obj_geo1_iterativeSubdivide_groupdelete1
opuserdata -n '___Version___' -v '19.5.368' $_obj_geo1_iterativeSubdivide_groupdelete1

# Node $_obj_geo1_iterativeSubdivide_attribdelete1 (Sop/attribdelete)
set _obj_geo1_iterativeSubdivide_attribdelete1 = `run("opadd -e -n -v attribdelete attribdelete1")`
oplocate -x `$arg2 + 3.2081599999999999` -y `$arg3 + 9.1832799999999999` $_obj_geo1_iterativeSubdivide_attribdelete1
opparm $_obj_geo1_iterativeSubdivide_attribdelete1 primdel ( __area )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_iterativeSubdivide_attribdelete1
opexprlanguage -s hscript $_obj_geo1_iterativeSubdivide_attribdelete1
opuserdata -n '___Version___' -v '' $_obj_geo1_iterativeSubdivide_attribdelete1
oporder -e output0 update_subdivide_group init_subdivide_group subdivide1 measure_area repeat_end1 repeat_begin1 groupdelete1 attribdelete1 
opcf ..
opset -p on $_obj_geo1_iterativeSubdivide

opcf $arg1
opwire -n $_obj_geo1_merge1 -0 $_obj_geo1_iterativeSubdivide
opcf $_obj_geo1_iterativeSubdivide
opwire -n $_obj_geo1_iterativeSubdivide_attribdelete1 -0 $_obj_geo1_iterativeSubdivide_output0
opwire -n $_obj_geo1_iterativeSubdivide_measure_area -0 $_obj_geo1_iterativeSubdivide_update_subdivide_group
opwire -n -i 0 -0 $_obj_geo1_iterativeSubdivide_init_subdivide_group
opwire -n $_obj_geo1_iterativeSubdivide_update_subdivide_group -0 $_obj_geo1_iterativeSubdivide_subdivide1
opwire -n $_obj_geo1_iterativeSubdivide_repeat_begin1 -0 $_obj_geo1_iterativeSubdivide_measure_area
opwire -n $_obj_geo1_iterativeSubdivide_subdivide1 -0 $_obj_geo1_iterativeSubdivide_repeat_end1
opwire -n $_obj_geo1_iterativeSubdivide_init_subdivide_group -0 $_obj_geo1_iterativeSubdivide_repeat_begin1
opwire -n $_obj_geo1_iterativeSubdivide_repeat_end1 -0 $_obj_geo1_iterativeSubdivide_groupdelete1
opwire -n $_obj_geo1_iterativeSubdivide_groupdelete1 -0 $_obj_geo1_iterativeSubdivide_attribdelete1
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_iterativeSubdivide
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_iterativeSubdivide
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>
</shelfDocument>
