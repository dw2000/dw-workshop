<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="subnet" label="loopify" icon="SOP_subnet">
    <helpURL>operator:Sop/subnet</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Sop/subnet</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if "outputnodename" in kwargs and "inputindex" in kwargs:
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if "inputnodename" in kwargs and "outputindex" in kwargs:
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9
    if "autoplace" in kwargs:
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if "shiftclick" in kwargs and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if "nodepositionx" in kwargs and             "nodepositiony" in kwargs:
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if "node_bbox" in kwargs:
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'

pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if 'subnet' not in child_type:
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r'''
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_flag_sim_loopify (Sop/subnet)
set _obj_flag_sim_loopify = `run("opadd -e -n -v subnet loopify")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_flag_sim_loopify
opspareds '    parm {         name    "sepparm"         label   "sepparm"         type    separator         default { "" }         range   { 0 1 }     }     parm {         name    "loop_range"         label   "Loop Range"         type    float         size    2         default { "1001" "1100" }         range   { 1001 1100 }         parmtag { "autoscope" "0000000000000000" }     }     parm {         name    "timeblend_mode"         label   "Timeblend Mode"         type    integer         default { "1" }         menu {             "0" "None"             "1" "Border Frames"             "2" "All Frames"         }         range   { 0 1 }     }     parm {         name    "label1"         baseparm         label   "Input #1 Label"         invisible         export  all     }     parm {         name    "label2"         baseparm         label   "Input #2 Label"         invisible         export  all     }     parm {         name    "label3"         baseparm         label   "Input #3 Label"         invisible         export  all     }     parm {         name    "label4"         baseparm         label   "Input #4 Label"         invisible         export  all     } ' $_obj_flag_sim_loopify
opparm -V 19.5.605 $_obj_flag_sim_loopify loop_range ( 1031 2000 ) timeblend_mode ( 2 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_flag_sim_loopify
opexprlanguage -s hscript $_obj_flag_sim_loopify
opuserdata -n '___Version___' -v '19.5.605' $_obj_flag_sim_loopify
opcf $_obj_flag_sim_loopify

# Node $_obj_flag_sim_loopify_timeblend1 (Sop/timeblend)
set _obj_flag_sim_loopify_timeblend1 = `run("opadd -e -n -v timeblend timeblend1")`
oplocate -x `$arg2 + 4.82423` -y `$arg3 + 3.2320600000000002` $_obj_flag_sim_loopify_timeblend1
opparm $_obj_flag_sim_loopify_timeblend1 holdfirst ( off )
opcolor -c 0.80000001192092896 0.80000001192092896 0.80000001192092896 $_obj_flag_sim_loopify_timeblend1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c off -e on -b off $_obj_flag_sim_loopify_timeblend1
opexprlanguage -s hscript $_obj_flag_sim_loopify_timeblend1
opuserdata -n '___Version___' -v '' $_obj_flag_sim_loopify_timeblend1

# Node $_obj_flag_sim_loopify_timeblend_borders_switch (Sop/switch)
set _obj_flag_sim_loopify_timeblend_borders_switch = `run("opadd -e -n -v switch timeblend_borders_switch")`
oplocate -x `$arg2 + 2.37459` -y `$arg3 + 1.34616` $_obj_flag_sim_loopify_timeblend_borders_switch
chblockbegin
chadd -t 40 40 $_obj_flag_sim_loopify_timeblend_borders_switch input
chkey -t 40 -v 1007 -m 0 -a 0 -A 0 -T a  -F 'ch("../loop/outrange2") < if(($FF < ch("../loop/outrange1")), (ch("../loop/outrange2") + ($FF - ch("../loop/outrange1") + 1) % (1 + ch("../loop/outrange2") - ch("../loop/outrange1"))), (ch("../loop/outrange1") + ($FF - ch("../loop/outrange1")) % (1 + ch("../loop/outrange2") - ch("../loop/outrange1"))))' $_obj_flag_sim_loopify_timeblend_borders_switch/input
chblockend
opcolor -c 0.80000001192092896 0.80000001192092896 0.80000001192092896 $_obj_flag_sim_loopify_timeblend_borders_switch
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_flag_sim_loopify_timeblend_borders_switch
opexprlanguage -s hscript $_obj_flag_sim_loopify_timeblend_borders_switch
opuserdata -n '___Version___' -v '19.5.605' $_obj_flag_sim_loopify_timeblend_borders_switch

# Node $_obj_flag_sim_loopify_loop (Sop/timewarp)
set _obj_flag_sim_loopify_loop = `run("opadd -e -n -v timewarp loop")`
oplocate -x `$arg2 + 0` -y `$arg3 + 5.2176` $_obj_flag_sim_loopify_loop
chblockbegin
chadd -t 40 40 $_obj_flag_sim_loopify_loop inrange1
chkey -t 40 -v 1001 -m 0 -a 0 -A 0 -T a  -F 'ch("../loop_range1")' $_obj_flag_sim_loopify_loop/inrange1
chadd -t 40 40 $_obj_flag_sim_loopify_loop inrange2
chkey -t 40 -v 1009 -m 0 -a 0 -A 0 -T a  -F 'ch("../loop_range2")' $_obj_flag_sim_loopify_loop/inrange2
chadd -t 40 40 $_obj_flag_sim_loopify_loop outrange1
chkey -t 40 -v 1001 -m 0 -a 0 -A 0 -T a  -F 'ch("inrange1")' $_obj_flag_sim_loopify_loop/outrange1
chadd -t 40 40 $_obj_flag_sim_loopify_loop outrange2
chkey -t 40 -v 1009 -m 0 -a 0 -A 0 -T a  -F 'ch("inrange2")' $_obj_flag_sim_loopify_loop/outrange2
chblockend
opparm $_obj_flag_sim_loopify_loop inrange ( inrange1 inrange2 ) outrange ( outrange1 outrange2 ) preextend ( cycle ) postextend ( cycle )
opcolor -c 0.80000001192092896 0.80000001192092896 0.80000001192092896 $_obj_flag_sim_loopify_loop
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c off -e on -b off $_obj_flag_sim_loopify_loop
opexprlanguage -s hscript $_obj_flag_sim_loopify_loop
opuserdata -n '___Version___' -v '' $_obj_flag_sim_loopify_loop

# Node $_obj_flag_sim_loopify_output1 (Sop/output)
set _obj_flag_sim_loopify_output1 = `run("opadd -e -n -v output output1")`
oplocate -x `$arg2 + 2.37459` -y `$arg3 + -5.4548100000000002` $_obj_flag_sim_loopify_output1
opparm -V 19.5.605 $_obj_flag_sim_loopify_output1 outputidx ( 0 )
chlock $_obj_flag_sim_loopify_output1 +outputidx
opcolor -c 0.80000001192092896 0.80000001192092896 0.80000001192092896 $_obj_flag_sim_loopify_output1
opset -d on -r on -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_flag_sim_loopify_output1
opexprlanguage -s hscript $_obj_flag_sim_loopify_output1
opuserdata -n '___Version___' -v '19.5.605' $_obj_flag_sim_loopify_output1

# Node $_obj_flag_sim_loopify_timeblend_mode_switch (Sop/switch)
set _obj_flag_sim_loopify_timeblend_mode_switch = `run("opadd -e -n -v switch timeblend_mode_switch")`
oplocate -x `$arg2 + 2.37459` -y `$arg3 + -2.7865799999999998` $_obj_flag_sim_loopify_timeblend_mode_switch
chblockbegin
chadd -t 40 40 $_obj_flag_sim_loopify_timeblend_mode_switch input
chkey -t 40 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("../timeblend_mode")' $_obj_flag_sim_loopify_timeblend_mode_switch/input
chblockend
opcolor -c 0.80000001192092896 0.80000001192092896 0.80000001192092896 $_obj_flag_sim_loopify_timeblend_mode_switch
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_flag_sim_loopify_timeblend_mode_switch
opexprlanguage -s hscript $_obj_flag_sim_loopify_timeblend_mode_switch
opuserdata -n '___Version___' -v '19.5.605' $_obj_flag_sim_loopify_timeblend_mode_switch
oporder -e timeblend1 timeblend_borders_switch loop output1 timeblend_mode_switch 
opcf ..
opset -p on $_obj_flag_sim_loopify

opcf $arg1
opcf $_obj_flag_sim_loopify
opwire -n $_obj_flag_sim_loopify_loop -0 $_obj_flag_sim_loopify_timeblend1
opwire -n $_obj_flag_sim_loopify_loop -0 $_obj_flag_sim_loopify_timeblend_borders_switch
opwire -n $_obj_flag_sim_loopify_timeblend1 -1 $_obj_flag_sim_loopify_timeblend_borders_switch
opwire -n -i 0 -0 $_obj_flag_sim_loopify_loop
opwire -n $_obj_flag_sim_loopify_timeblend_mode_switch -0 $_obj_flag_sim_loopify_output1
opwire -n $_obj_flag_sim_loopify_loop -0 $_obj_flag_sim_loopify_timeblend_mode_switch
opwire -n $_obj_flag_sim_loopify_timeblend_borders_switch -1 $_obj_flag_sim_loopify_timeblend_mode_switch
opwire -n $_obj_flag_sim_loopify_timeblend1 -2 $_obj_flag_sim_loopify_timeblend_mode_switch
opcf ..

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_flag_sim_loopify
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_flag_sim_loopify
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>
</shelfDocument>
