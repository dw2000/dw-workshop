<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="DW_camera_switcher" label="DW Camera Switcher" icon="OBJ_switcher">
    <helpURL>operator:Object/switcher</helpURL>
    <toolMenuContext name="network">
      <contextOpType>Object/switcher</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if "outputnodename" in kwargs and "inputindex" in kwargs:
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if "inputnodename" in kwargs and "outputindex" in kwargs:
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9
    if "autoplace" in kwargs:
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if "shiftclick" in kwargs and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if "nodepositionx" in kwargs and             "nodepositiony" in kwargs:
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if "node_bbox" in kwargs:
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'

pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if 'switcher' not in child_type:
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r'''
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_DW_camSwitcher (Object/switcher)
set _obj_DW_camSwitcher = `run("opadd -e -n -v switcher DW_camSwitcher")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_DW_camSwitcher
opspareds '    parm {         name    "current_camera"         label   "Current Camera"         type    ordinal         joinnext         default { "0" }         menu {             [ "node = kwargs[\'node\']" ]             [ "menu_items=[]" ]             [ "node_name = \\"\\"" ]             [ "" ]             [ "if len(node.inputConnections()) > 0:" ]             [ "    for i in range(len(node.inputConnections())):" ]             [ "        try:" ]             [ "            node_name = node.input(i).name()" ]             [ "        except:" ]             [ "            pass" ]             [ "        menu_items.append(node_name)" ]             [ "        menu_items.append(node_name)" ]             [ "" ]             [ "else:" ]             [ "    menu_items.append(\\"None\\")" ]             [ "    menu_items.append(\\"None\\")" ]             [ "" ]             [ "menu_items.sort()" ]             [ "return menu_items    " ]             language python         }         parmtag { "script_callback" "exec(kwargs[\'node\'].parm(\'code\').eval())" }         parmtag { "script_callback_language" "python" }     }     parm {         name    "frame_range"         label   "Frame Range"         type    vector2         invisible         size    2         default { "ch(strcat(opinputpath(\\".\\", ch(\\"camswitch\\")), \\"/frame_rangex\\"))" "ch(strcat(opinputpath(\\".\\", ch(\\"camswitch\\")), \\"/frame_rangey\\"))" }         range   { -1 1 }         parmtag { "script_callback_language" "python" }     }     group {         name    "stdswitcher3"         label   "Render"         invisibletab          parm {             name    "xOrd"             baseparm             label   "Transform Order"             invisible             joinnext             export  none         }         parm {             name    "rOrd"             baseparm             label   "Rotate Order"             nolabel             invisible             export  none         }         parm {             name    "t"             baseparm             label   "Translate"             invisible             export  none         }         parm {             name    "r"             baseparm             label   "Rotate"             invisible             export  none         }         parm {             name    "s"             baseparm             label   "Scale"             invisible             export  none         }         parm {             name    "p"             baseparm             label   "Pivot Translate"             invisible             export  none         }         parm {             name    "pr"             baseparm             label   "Pivot Rotate"             invisible             export  none         }         parm {             name    "scale"             baseparm             label   "Uniform Scale"             invisible             export  none         }         parm {             name    "pre_xform"             baseparm             label   "Modify Pre-Transform"             invisible             export  none         }         parm {             name    "keeppos"             baseparm             label   "Keep Position When Parenting"             invisible             export  none         }         parm {             name    "childcomp"             baseparm             label   "Child Compensation"             invisible             export  none         }         parm {             name    "constraints_on"             baseparm             label   "Enable Constraints"             export  none         }         parm {             name    "constraints_path"             baseparm             label   "Constraints"             export  none         }         parm {             name    "lookatpath"             baseparm             label   "Look At"             invisible             export  none         }         parm {             name    "lookupobjpath"             baseparm             label   "Look Up Object"             invisible             export  none         }         parm {             name    "lookup"             baseparm             label   "Look At Up Vector"             invisible             export  none         }         parm {             name    "pathobjpath"             baseparm             label   "Path Object"             invisible             export  none         }         parm {             name    "roll"             baseparm             label   "Roll"             invisible             export  none         }         parm {             name    "pos"             baseparm             label   "Position"             invisible             export  none         }         parm {             name    "uparmtype"             baseparm             label   "Parameterization"             invisible             export  none         }         parm {             name    "pathorient"             baseparm             label   "Orient Along Path"             invisible             export  none         }         parm {             name    "up"             baseparm             label   "Orient Up Vector"             invisible             export  none         }         parm {             name    "bank"             baseparm             label   "Auto-Bank factor"             invisible             export  none         }         parm {             name    "camswitch"             baseparm             label   "Switch Camera"             export  all         }         parm {             name    "tdisplay"             baseparm             label   "Display"             joinnext             export  none         }         parm {             name    "display"             baseparm             label   "Display"             export  none         }     }      group {         name    "stdswitcher3_1"         label   "Misc"         invisibletab          parm {             name    "use_dcolor"             baseparm             label   "Set Wireframe Color"             export  none         }         parm {             name    "dcolor"             baseparm             label   "Wireframe Color"             export  none         }         parm {             name    "picking"             baseparm             label   "Viewport Selecting Enabled"             export  none         }         parm {             name    "pickscript"             baseparm             label   "Select Script"             export  none         }         parm {             name    "caching"             baseparm             label   "Cache Object Transform"             export  none         }     }      group {         name    "stdswitcher3_2"         label   "Output"         invisibletab          parm {             name    "override_camerares"             label   "Override Camera Resolution"             type    toggle             default { "0" }             parmtag { "spare_category" "Output" }         }         parm {             name    "res_fraction"             label   "Resolution Scale"             type    string             default { "0.5" }             hidewhen "{ override_camerares == 0 }"             menu {                 "0.1"       "1/10 (One Tenth Resolution)"                 "0.2"       "1/5 (One Fifth Resolution)"                 "0.25"      "1/4 (Quarter Resolution)"                 "0.3333333" "1/3 (One Third Resolution)"                 "0.5"       "1/2 (Half Resolution)"                 "0.6666666" "2/3 (Two Thirds Resolution)"                 "0.75"      "3/4 (Three Quarter Resolution)"                 "specific"  "User Specified Resolution"             }             parmtag { "spare_category" "Output" }         }         parm {             name    "res_override"             label   "Resolution"             type    intvector2             joinnext             size    2             default { "1280" "720" }             disablewhen "{ res_fraction != specific }"             hidewhen "{ override_camerares == 0 }"             range   { -1 1 }             parmtag { "spare_category" "Output" }         }         parm {             name    "res_overrideMenu"             label   "Choose Resolution"             type    button             nolabel             default { "0" }             disablewhen "{ res_fraction != specific }"             hidewhen "{ override_camerares == 0 }"             menumini {                 [ "echo `pythonexprs(\\"__import__(\'toolutils\').parseDialogScriptMenu(\'FBres\')\\")`" ]             }             parmtag { "script_callback" "opparm . res_override ( `arg(\\"$script_value\\", 0)` `arg(\\"$script_value\\", 1)` aspect_override ( `arg(\\"$script_value\\", 2)` )" }             parmtag { "spare_category" "Output" }         }         parm {             name    "aspect_override"             label   "Pixel Aspect Ratio"             type    float             default { "1" }             disablewhen "{ res_fraction != specific }"             hidewhen "{ override_camerares == 0 }"             range   { 0.05 2 }             parmtag { "spare_category" "Output" }         }     }      parm {         name    "update_playback_frame_range"         label   "Update Playback Frame Range"         type    toggle         joinnext         default { "1" }         disablewhen "{ update_global_frame_range == 1 }"         parmtag { "script_callback_language" "python" }     }     parm {         name    "update_global_frame_range"         label   "Update Global Frame Range"         type    toggle         default { "1" }         parmtag { "script_callback_language" "python" }     }     parm {         name    "code"         label   "Code"         type    string         invisible         default { "" }         parmtag { "editor" "1" }         parmtag { "editorlang" "python" }         parmtag { "script_callback_language" "python" }     } ' $_obj_DW_camSwitcher
chblockbegin
chadd -t 45.126666666666665 45.126666666666665 $_obj_DW_camSwitcher camswitch
chkey -t 45.126666666666665 -v 1 -m 0 -a 0.33333333333333331 -A 0.33333333333333331 -T a  -o mM  -F 'node = hou.pwd()\n\ncam_parm = node.parm("current_camera")\ncurrent_cam = cam_parm.menuItems()[cam_parm.eval()]\n\ncam_index = 999\nfor i in range(len(node.inputConnections())):\n    if node.input(i).name() == current_cam:\n        cam_index = i\nreturn cam_index' -l p $_obj_DW_camSwitcher/camswitch
chadd -t 42.041666666666664 42.041666666666664 $_obj_DW_camSwitcher frame_rangex
chkey -t 42.041666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch(strcat(opinputpath(".", ch("camswitch")), "/frame_rangex"))' $_obj_DW_camSwitcher/frame_rangex
chadd -t 42.041666666666664 42.041666666666664 $_obj_DW_camSwitcher frame_rangey
chkey -t 42.041666666666664 -v 0 -m 0 -a 0 -A 0 -T a  -F 'ch(strcat(opinputpath(".", ch("camswitch")), "/frame_rangey"))' $_obj_DW_camSwitcher/frame_rangey
chblockend
opset -S off $_obj_DW_camSwitcher
opparm -V 19.5.605 $_obj_DW_camSwitcher t ( -17.278251180626214 9.2330506281261098 -58.868749022185902 ) r ( 27.101679035589058 -29.804730604945156 -12.066117854712516 ) camswitch ( camswitch ) picking ( off ) current_camera ( 12 ) code ( 'node = hou.pwd()\n\nif node.parm("update_playback_frame_range").eval():\n    hou.playbar.setPlaybackRange(node.parm("frame_rangex").eval(), node.parm("frame_rangey").eval())\n\nif node.parm("update_global_frame_range").eval():\n    hou.playbar.setFrameRange(node.parm("frame_rangex").eval(), node.parm("frame_rangey").eval())' )
chlock $_obj_DW_camSwitcher +camswitch
chautoscope $_obj_DW_camSwitcher +tx +ty +tz +rx +ry +rz +sx +sy +sz +camswitch +pickscript
opcolor -c 0.3059999942779541 0.3059999942779541 0.3059999942779541 $_obj_DW_camSwitcher
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off -x off $_obj_DW_camSwitcher
opexprlanguage -s hscript $_obj_DW_camSwitcher
opuserdata -n '___Version___' -v '19.5.605' $_obj_DW_camSwitcher
opset -p on $_obj_DW_camSwitcher

opcf $arg1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_DW_camSwitcher
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_DW_camSwitcher
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>
</shelfDocument>
